const express = require("express");
const app = express();
const PORT = process.env.PORT || 3000;

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const DEEPSEEK_API_KEY = "sk-2ecfef4eb45a493197c4091bebf21be2";
const TELEGRAM_API_URL = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN;

if (!TELEGRAM_BOT_TOKEN) {
    console.error("–û—à–∏–±–∫–∞: –Ω–µ—Ç TELEGRAM_BOT_TOKEN");
    process.exit(1);
}

let lastUpdateId = 0;

app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Deepseek AI —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function getAIResponse(userMessage, userName) {
    if (!DEEPSEEK_API_KEY || DEEPSEEK_API_KEY.length < 10) {
        console.log("‚ö†Ô∏è API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π");
        return null;
    }
    
    console.log("üîç –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ Deepseek AI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userName);
    console.log("üìù –°–æ–æ–±—â–µ–Ω–∏–µ:", userMessage.substring(0, 100) + "...");
    
    try {
        const fetch = require("node-fetch");
        
        // –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        const systemPrompt = `–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –û—Ç–≤–µ—á–∞—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
2. –ë—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
3. –î–∞–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º
4. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏ –æ–± —ç—Ç–æ–º
5. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ (–º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
6. –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω`;

        const userPrompt = `–ú–µ–Ω—è –∑–æ–≤—É—Ç ${userName}. –Ø –Ω–∞–ø–∏—Å–∞–ª: "${userMessage}". –ü–æ–º–æ–≥–∏ –º–Ω–µ –∫–∞–∫ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.`;
        
        const requestBody = {
            model: "deepseek-chat",
            messages: [
                {
                    role: "system",
                    content: systemPrompt
                },
                {
                    role: "user", 
                    content: userPrompt
                }
            ],
            max_tokens: 150,
            temperature: 0.7,
            top_p: 1,
            stream: false
        };
        
        console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Deepseek API...");
        
        const response = await fetch("https://api.deepseek.com/v1/chat/completions", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": "Bearer " + DEEPSEEK_API_KEY,
                "User-Agent": "TravelBot/1.0"
            },
            body: JSON.stringify(requestBody),
            timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });
        
        console.log("üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status, response.statusText);
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫
        if (!response.ok) {
            const errorText = await response.text();
            console.error("‚ùå HTTP –æ—à–∏–±–∫–∞:", response.status);
            console.error("‚ùå –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:", errorText);
            
            if (response.status === 401) {
                console.error("üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á");
            } else if (response.status === 429) {
                console.error("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤");
            } else if (response.status >= 500) {
                console.error("üîß –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Deepseek");
            }
            
            return null;
        }
        
        const data = await response.json();
        console.log("üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Deepseek");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if (data && data.choices && Array.isArray(data.choices) && data.choices.length > 0) {
            const choice = data.choices[0];
            if (choice.message && choice.message.content) {
                const aiResponse = choice.message.content.trim();
                console.log("‚úÖ AI –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:", aiResponse.length);
                console.log("üí¨ –û—Ç–≤–µ—Ç:", aiResponse.substring(0, 100) + "...");
                return aiResponse;
            }
        }
        
        console.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:", JSON.stringify(data, null, 2));
        return null;
        
    } catch (error) {
        if (error.name === 'AbortError') {
            console.error("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Deepseek API");
        } else if (error.code === 'ENOTFOUND') {
            console.error("üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º");
        } else {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Deepseek:", error.message);
        }
        return null;
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendMessage(chatId, text, parseMode = "Markdown") {
    const url = TELEGRAM_API_URL + "/sendMessage";
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
    const maxLength = 4096;
    const truncatedText = text.length > maxLength ? text.substring(0, maxLength - 3) + "..." : text;
    
    const data = {
        chat_id: chatId,
        text: truncatedText,
        parse_mode: parseMode
    };

    try {
        const fetch = require("node-fetch");
        const response = await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        if (!result.ok) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", result);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ parse_mode –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            if (result.error_code === 400 && parseMode) {
                return await sendMessage(chatId, text, null);
            }
        }
        return result;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
}

async function handleStartCommand(chatId, firstName) {
    const welcomeMessage = `ü§ñ *–ü—Ä–∏–≤–µ—Ç, ${firstName}!*

–Ø —É–º–Ω—ã–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!

üéØ *–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—é —Ç—É—Ä—ã –ø–æ –ª—é–±—ã–º —Å—Ç—Ä–∞–Ω–∞–º
‚Ä¢ –î–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º  
‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–æ–≤
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∏–∑–∞—Ö, –ø–æ–≥–æ–¥–µ, –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç–µ–ª–∏, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è

üí¨ *–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ:*
- –ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å
- –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç
- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –æ—Ç–¥—ã—Ö—É
- –õ—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö

*–ö–æ–º–∞–Ω–¥—ã:* /start | /help`;

    await sendMessage(chatId, welcomeMessage);
}

async function handleHelpCommand(chatId) {
    const helpMessage = `üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*

üß† –Ø –∏—Å–ø–æ–ª—å–∑—É—é *Deepseek AI* –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!

üí° *–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–•–æ—á—É –ø–æ–µ—Ö–∞—Ç—å –≤ –Ø–ø–æ–Ω–∏—é –≤–µ—Å–Ω–æ–π –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏"
‚Ä¢ "–ü–æ—Å–æ–≤–µ—Ç—É–π –Ω–µ–¥–æ—Ä–æ–≥–æ–π –æ—Ç–¥—ã—Ö –Ω–∞ –º–æ—Ä–µ –¥–æ 1000$"
‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –¢–∞–∏–ª–∞–Ω–¥–∞?"
‚Ä¢ "–õ—É—á—à–∏–µ –º–µ—Å—Ç–∞ –≤ –ï–≤—Ä–æ–ø–µ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–µ–∑–¥–∫–∏"
‚Ä¢ "–ì–¥–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –ù–æ–≤—ã–π –≥–æ–¥?"

‚ú® *–°–æ–≤–µ—Ç:* –ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–±—é–¥–∂–µ—Ç, –¥–∞—Ç—ã, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è), —Ç–µ–º —Ç–æ—á–Ω–µ–µ –º–æ–π –æ—Ç–≤–µ—Ç!

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üöÄ *–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!*`;

    await sendMessage(chatId, helpMessage);
}

async function handleTextMessage(chatId, text, firstName) {
    console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${firstName}: "${text}"`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const thinkingMessage = await sendMessage(chatId, "ü§î *–î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...*");
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    const aiResponse = await getAIResponse(text, firstName);
    
    if (aiResponse) {
        console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        await sendMessage(chatId, `üß† ${aiResponse}`);
    } else {
        console.log("‚ö†Ô∏è AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã");
        
        // –£–ª—É—á—à–µ–Ω–Ω—ã–µ fallback –æ—Ç–≤–µ—Ç—ã
        const textLower = text.toLowerCase();
        
        if (textLower.includes("vietnam") || textLower.includes("–≤—å–µ—Ç–Ω–∞–º")) {
            await sendMessage(chatId, `üáªüá≥ *–í—å–µ—Ç–Ω–∞–º - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!*

üèñÔ∏è *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*
‚Ä¢ *–ù—è—á–∞–Ω–≥* - –∫—Ä–∞—Å–∏–≤—ã–µ –ø–ª—è–∂–∏, –¥–∞–π–≤–∏–Ω–≥
‚Ä¢ *–§—É–∫—É–æ–∫* - —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤, —Ä–µ–ª–∞–∫—Å
‚Ä¢ *–ú—É–π–Ω–µ* - –∫–∞–π—Ç—Å–µ—Ä—Ñ–∏–Ω–≥, –ø–µ—Å—á–∞–Ω—ã–µ –¥—é–Ω—ã
‚Ä¢ *–•–∞–Ω–æ–π* - —Å—Ç–æ–ª–∏—Ü–∞, –∫—É–ª—å—Ç—É—Ä–∞, –∏—Å—Ç–æ—Ä–∏—è
‚Ä¢ *–•–æ—à–∏–º–∏–Ω* - –º–µ–≥–∞–ø–æ–ª–∏—Å, —à–æ–ø–∏–Ω–≥, –µ–¥–∞

üå§Ô∏è *–õ—É—á—à–µ–µ –≤—Ä–µ–º—è:* –ù–æ—è–±—Ä—å-–ú–∞—Ä—Ç
üí∞ *–ü—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç:* –æ—Ç 800$ –Ω–∞ –Ω–µ–¥–µ–ª—é
üìã *–í–∏–∑–∞:* –Ω–µ –Ω—É–∂–Ω–∞ –¥–æ 15 –¥–Ω–µ–π

–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–æ –í—å–µ—Ç–Ω–∞–º–µ?`);
        } else if (textLower.includes("—Ç–∞–∏–ª–∞–Ω–¥") || textLower.includes("thailand")) {
            await sendMessage(chatId, `üáπüá≠ *–¢–∞–∏–ª–∞–Ω–¥ - –∫–ª–∞—Å—Å–∏–∫–∞ –ø–ª—è–∂–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!*

üèùÔ∏è *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞:*
‚Ä¢ *–ü—Ö—É–∫–µ—Ç* - —Ä–∞–∑–≤–∏—Ç–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
‚Ä¢ *–°–∞–º—É–∏* - —É—é—Ç–Ω—ã–µ –ø–ª—è–∂–∏
‚Ä¢ *–ö—Ä–∞–±–∏* - –∂–∏–≤–æ–ø–∏—Å–Ω–∞—è –ø—Ä–∏—Ä–æ–¥–∞

üèôÔ∏è *–ì–æ—Ä–æ–¥–∞:*
‚Ä¢ *–ë–∞–Ω–≥–∫–æ–∫* - —Å—Ç–æ–ª–∏—Ü–∞, —Ö—Ä–∞–º—ã, —à–æ–ø–∏–Ω–≥
‚Ä¢ *–ü–∞—Ç—Ç–∞–π—è* - –∞–∫—Ç–∏–≤–Ω–∞—è –Ω–æ—á–Ω–∞—è –∂–∏–∑–Ω—å

üí∞ *–ë—é–¥–∂–µ—Ç:* –æ—Ç 600$ –Ω–∞ –Ω–µ–¥–µ–ª—é
üìã *–í–∏–∑–∞:* –Ω–µ –Ω—É–∂–Ω–∞ –¥–æ 30 –¥–Ω–µ–π`);
        } else {
            // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ fallback –æ—Ç–≤–µ—Ç—ã
            const smartResponses = [
                `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üåç –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –ø–ª–∞–Ω–∞—Ö - –≤ –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É –¥—É–º–∞–µ—Ç–µ –ø–æ–µ—Ö–∞—Ç—å, –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π?`,
                `–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ü§î –ß—Ç–æ–±—ã –¥–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —É—Ç–æ—á–Ω–∏—Ç–µ: –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö, —ç–∫—Å–∫—É—Ä—Å–∏–∏ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è?`,
                `${firstName}, –æ—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üìÖ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ–∑–¥–∫—É? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.`,
                `–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º! üíº –ö–∞–∫–æ–π –ø—Ä–∏–º–µ—Ä–Ω–æ –±—é–¥–∂–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∏ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –ø–æ–µ–¥–µ—Ç?`,
                `–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! üéØ –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö: –º–æ—Ä–µ/–≥–æ—Ä—ã, —Å–ø–æ–∫–æ–π–Ω—ã–π –æ—Ç–¥—ã—Ö/–∞–∫—Ç–∏–≤–Ω—ã–π?`
            ];

            const randomResponse = smartResponses[Math.floor(Math.random() * smartResponses.length)];
            await sendMessage(chatId, randomResponse);
        }
    }
}

async function processUpdate(update) {
    if (!update.message || !update.message.text) return;

    const message = update.message;
    const chatId = message.chat.id;
    const text = message.text.trim();
    const firstName = message.from.first_name || "–î—Ä—É–≥";

    console.log(`üì® [${new Date().toLocaleTimeString()}] ${firstName} (${chatId}): ${text}`);

    if (text.startsWith("/")) {
        const command = text.split(" ")[0].toLowerCase();

        switch (command) {
            case "/start":
                await handleStartCommand(chatId, firstName);
                break;
            case "/help":
                await handleHelpCommand(chatId);
                break;
            default:
                await sendMessage(chatId, `‚ùì *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:* ${command}

üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö!

üí° *–ù–∞–ø—Ä–∏–º–µ—Ä:* "–•–æ—á—É –ø–æ–µ—Ö–∞—Ç—å –≤ –ò—Ç–∞–ª–∏—é –Ω–∞ 10 –¥–Ω–µ–π"`);
        }
    } else if (text) {
        await handleTextMessage(chatId, text, firstName);
    }
}

async function getUpdates() {
    const url = TELEGRAM_API_URL + "/getUpdates?offset=" + (lastUpdateId + 1) + "&timeout=30";

    try {
        const fetch = require("node-fetch");
        const response = await fetch(url);
        const data = await response.json();

        if (data.ok && data.result.length > 0) {
            for (const update of data.result) {
                await processUpdate(update);
                lastUpdateId = update.update_id;
            }
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:", error.message);
    }
}

async function startPolling() {
    console.log("üöÄ –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π AI-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
    console.log("‚úÖ Deepseek AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞");
    console.log("üîë API –∫–ª—é—á:", DEEPSEEK_API_KEY ? DEEPSEEK_API_KEY.substring(0, 10) + "..." : "–û–¢–°–£–¢–°–¢–í–£–ï–¢");
    console.log("üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:", new Date().toLocaleString());
    console.log("üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...\n");

    while (true) {
        try {
            await getUpdates();
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:", error.message);
            console.log("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
            await new Promise(resolve => setTimeout(resolve, 5000));
        }

        await new Promise(resolve => setTimeout(resolve, 1000));
    }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π API endpoint –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
app.get("/", (req, res) => {
    const status = {
        status: "üü¢ –†–ê–ë–û–¢–ê–ï–¢",
        message: "ü§ñ –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π AI-–±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω",
        deepseek_ai: DEEPSEEK_API_KEY ? "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" : "üî¥ –û—Ç–∫–ª—é—á–µ–Ω",
        uptime_seconds: Math.floor(process.uptime()),
        uptime_formatted: new Date(process.uptime() * 1000).toISOString().substr(11, 8),
        memory_usage: process.memoryUsage(),
        timestamp: new Date().toISOString(),
        version: "2.0.0"
    };
    
    res.json(status);
});

app.post("/webhook", async (req, res) => {
    try {
        const update = req.body;
        await processUpdate(update);
        res.sendStatus(200);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ webhook:", error);
        res.sendStatus(500);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
process.on('uncaughtException', (error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

app.listen(PORT, () => {
    console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    startPolling();
});
```
